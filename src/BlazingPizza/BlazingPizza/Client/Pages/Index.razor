@page "/"
@inject HttpClient HttpClient
@inject OrderState  OrderState

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="() => OrderState.ShowConfigurePizzaDialog(special)" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.FormattedBasePrice</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>
            @foreach (var configuredPizza in Order.Pizzas)
            {
                <PizzaItem Pizza="configuredPizza"
                           OnRemoved="() => OrderState.RemoveConfiguredPizza(configuredPizza)" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br />to get started</div>
    }
    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.FormattedTotalPrice</span>
        <a href="checkout" class="btn btn-warning" disabled="@(Order.Pizzas.Count() == 0)">
            Order >
        </a>
    </div>
</div>



@if (OrderState.ShowingConfigureDialog)
{
    <PizzaDialog Pizza="OrderState.ConfiguringPizza"
                 OnCancel="OrderState.CancelConfigurePizzaDialog"
                 OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code {
    List<PizzaSpecial> specials;
    Order Order => OrderState.Order;

    protected async override Task OnInitializedAsync()
    {
        specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("specials");
    }


}

